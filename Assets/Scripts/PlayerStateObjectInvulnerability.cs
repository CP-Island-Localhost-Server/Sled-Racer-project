using Disney.ClubPenguin.SledRacer;
using UnityEngine;

public class PlayerStateObjectInvulnerability : PlayerStateObject
{
	private ConfigController config;

	private float InvulnerabilityTimer;

	public GameObject InvulnerabilityShield;

	public GameObject InvulnerabilityTrail;

	private bool warned;

	protected override void OnAwake()
	{
		config = Service.Get<ConfigController>();
		base.enabled = false;
		InvulnerabilityTrail.SetActive(value: false);
		base.gameObject.SetActive(value: true);
	}

	private void Start()
	{
		stateAnimator = InvulnerabilityShield.GetComponent<Animator>();
	}

	private void OnEnable()
	{
		InvulnerabilityTrail.SetActive(value: false);
	}

	public override void EnterState()
	{
		InvulnerabilityTimer = Service.Get<ConfigController>().IcePatchInvulnerabilityTime;
		if (!base.enabled || warned)
		{
			base.enabled = true;
			warned = false;
			stateAnimator.ResetTrigger("BlurStop");
			stateAnimator.SetTrigger("BlurStart");
			InvulnerabilityTrail.SetActive(value: true);
		}
	}

	protected override void ExitState()
	{
		DispatchExitStateEvent();
	}

	private void Update()
	{
		if (base.enabled)
		{
			InvulnerabilityTimer -= Time.deltaTime;
			if (InvulnerabilityTimer <= 0f + config.IcePatchInvulnerabilityWarnTime)
			{
				warned = true;
				stateAnimator.SetTrigger("BlurStop");
				InvulnerabilityTrail.SetActive(value: false);
			}
			if (InvulnerabilityTimer <= 0f)
			{
				ExitState();
				base.enabled = false;
				warned = false;
			}
		}
	}

	public override void AbortState()
	{
	}
}
